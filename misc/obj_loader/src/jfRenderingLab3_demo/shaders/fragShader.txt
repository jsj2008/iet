

varying vec3 reflectv;
varying vec3 refractv;
uniform samplerCube myMap;

uniform int doReflect; //pass a value in to switch between reflect and refract

varying float reflectionCoeff;

//For chromatic dispersion
varying vec3 refractvRed; 
varying vec3 refractvBlue; 
varying vec3 refractvGreen; 

void main(void)
{
	if(doReflect==0)
	{
		//reflection solution only 
		vec4 R = textureCube(myMap,reflectv);
		gl_FragColor = R; 
	}
	else if(doReflect==1)
	{
		//refraction solution only
		vec4 R = textureCube(myMap,refractv);
		if(length(refractv) < 0)
		{
			gl_FragColor = textureCube(myMap, vec3(0,0,0));
		}
		else if(length(refractv) > 1)
		{
			gl_FragColor = textureCube(myMap, vec3(0,0,0));
		}
		else
		{
			gl_FragColor = R; 
		}
	}
	else if(doReflect==2)
	{
		vec4 reflectedColour = textureCube(myMap,reflectv);
		vec4 refractedColour = textureCube(myMap,refractv);
		//Linear interpolation between the colours.
		vec3 colour = mix(refractedColour, reflectedColour, reflectionCoeff);
		gl_FragColor = vec4(colour, 1.0);
	}
	else if(doReflect==3)
	{
		vec4 reflectedColour = textureCube(myMap,reflectv);
		vec4 refractedColour;
		refractedColour.r = textureCube(myMap,refractvRed).r;
		refractedColour.b = textureCube(myMap,refractvBlue).b;
		refractedColour.g = textureCube(myMap,refractvGreen).g;
		//Linear interpolation between the colours.
		vec3 colour = mix(refractedColour, reflectedColour, reflectionCoeff);
		gl_FragColor = vec4(colour, 1.0);
	}
	//To DO: refraction + reflection
}


